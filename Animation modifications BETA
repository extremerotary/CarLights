/*
 Name:		CarInterface.ino
 Created:	3/17/2021 4:15:11 PM
 Author:	Scott Marley; Modified by Extremerotary
 
 Code and schematic demonstrating how to interface an Arduino with 12V signals
 from a vehicle. This code is for educational purposes only, and should not be
 used on public roads unless you know it is legal where you live.
*/

#include <FastLED.h>

#define NUM_LEDS		  89
#define BRAKE_LEDS        58
#define INDICATOR_MS      5
#define BRIGHTNESS        200

// Connections to the 12V signals from vehicle
#define BRAKE_INPUT			  31
#define L_INDICATOR_INPUT	33
#define R_INDICATOR_INPUT	35

// Connections to the LED strips
#define BRAKE_LED_PIN		  44
#define L_INDICATOR_LED_PIN	46
#define R_INDICATOR_LED_PIN	48

// LED arrays for the lights
CRGB brake_leds[BRAKE_LEDS];
CRGB l_indicator_leds[NUM_LEDS];
CRGB r_indicator_leds[NUM_LEDS];

// Used for indicator animation
uint8_t indicatorLEDsLit = 0;

void setup() {
	FastLED.addLeds<WS2812B, BRAKE_LED_PIN, GRB>(brake_leds, BRAKE_LEDS).setCorrection(TypicalLEDStrip);
	FastLED.addLeds<WS2812B, L_INDICATOR_LED_PIN, GRB>(l_indicator_leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
	FastLED.addLeds<WS2812B, R_INDICATOR_LED_PIN, GRB>(r_indicator_leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
	FastLED.setBrightness(BRIGHTNESS);

	pinMode(BRAKE_INPUT, INPUT);
	pinMode(L_INDICATOR_INPUT, INPUT);
	pinMode(R_INDICATOR_INPUT, INPUT);

  Serial.begin(9600);
}

void loop() {

	// Read the state of the inputs
	bool brakeInput = digitalRead(BRAKE_INPUT);
	bool LIndicatorInput = digitalRead(L_INDICATOR_INPUT);
	bool RIndicatorInput = digitalRead(R_INDICATOR_INPUT);
	
	// Brake lights
	if (brakeInput) {
		fill_solid(brake_leds, BRAKE_LEDS, CRGB::Red);
	}
	else {
		fill_solid(brake_leds, BRAKE_LEDS, CRGB::Black);
	}

	// Indicators
	if (LIndicatorInput && !RIndicatorInput) {
		indicatorAnimation(l_indicator_leds);
	}
	
	else if (RIndicatorInput && !LIndicatorInput) {
		indicatorAnimation(r_indicator_leds);
	}
	
	// Hazards
	else if (LIndicatorInput && RIndicatorInput) {
		fill_solid(l_indicator_leds, NUM_LEDS, CRGB::Orange);
		fill_solid(r_indicator_leds, NUM_LEDS, CRGB::Orange);
	}
	
	else {
		fill_solid(l_indicator_leds, NUM_LEDS, CRGB::Black);
		fill_solid(r_indicator_leds, NUM_LEDS, CRGB::Black);
		indicatorLEDsLit = 0;
	}

	FastLED.show();
}

void indicatorAnimation(CRGB *leds) {
    for (int i = 0; i < (indicatorLEDsLit); i++) {
    int offset = (i-15);
    if (offset>=0) {
      leds[offset] = CRGB::Black;      // start turning off the LEDs after 15 have been illuminated
    }
    leds[i] = CRGB::Orange;           // To-do, figure out how to turn off the last 15 and also reverse the chase animation
	}
	
	EVERY_N_MILLISECONDS(INDICATOR_MS) {
		indicatorLEDsLit++;
		if (indicatorLEDsLit > NUM_LEDS) indicatorLEDsLit = NUM_LEDS;
	}
}
